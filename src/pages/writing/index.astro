---
import { getCollection } from 'astro:content';
import I18NLink from '@/components/I18nLink.astro';
import BaseHead from '../../components/BaseHead.astro';
import FormattedDate from '../../components/FormattedDate.astro';
import { SITE_DESCRIPTION } from '../../consts';
import Layout from '../../layouts/Layout.astro';
import { i18n } from '@/i18n/utils';
import CategorySelector from '@/components/writing/CategorySelector.astro';

const { language, t } = i18n(Astro.url);
const posts = (await getCollection('blog'))
  .sort((a, b) => b.data.pubDate.valueOf() - a.data.pubDate.valueOf())
  .filter((post) => {
    if (language === 'ko') {
      return !post.id.match(/^(en|ja)-/);
    }
    return post.id.startsWith(`${language}-`);
  })
  .map((post) => {
    return {
      ...post,
      id: post.id.replace(`${language}-`, ''),
    };
  });
---

<Layout>
	<Fragment slot="head">
		<BaseHead description={SITE_DESCRIPTION} />
	</Fragment>
  <section class="container">
    <div class="relative">
      <h1 class="typo-sans-bold vt-name-[name]">{t('name')}</h1>
      <p class="typo-sans-bold opacity-50">{t('writing')}</p>
    </div>

    <div class="mt-8 -mx-4">
      <CategorySelector />
    </div>

    <ul class="space-y-6 mt-4">
      {
        posts.map((post, index) => (
          <li class="post-item group" style={`--sibling-index: ${index}`} data-category={post.data.category.id || 'etc'}>
            <I18NLink class="flex no-prose justify-between items-center gap-x-4 group-hover:bg-foreground/5 transition-colors duration-300 -m-2 p-2 rounded-md" href={`/writing/${post.id}/`}>
              <h4 class="typo-sans-bold">{post.data.title}</h4>
              <div class="flex-1 h-px bg-transparent group-hover:bg-foreground/10 transition-colors duration-300"></div>
              <p class="date typo-caption">
                <FormattedDate date={post.data.pubDate} />
              </p>
            </I18NLink>
          </li>
        ))
      }
    </ul>
  </section>
</Layout>

<script>
  function filterPosts() {
    const params = new URLSearchParams(window.location.search);
    const selectedCategory = params.get('category') || 'all';
    const postItems = document.querySelectorAll('.post-item') as NodeListOf<HTMLElement>;

    let visibleIndex = 0;
    postItems.forEach((item) => {
      const postCategory = item.dataset.category;
      const shouldShow = selectedCategory === 'all' || postCategory === selectedCategory;

      if (shouldShow) {
        item.style.display = 'block';
        item.style.setProperty('--sibling-index', visibleIndex.toString());
        item.style.animation = 'none';
        item.offsetHeight; // Force reflow
        item.style.animation = null;
        visibleIndex++;
      } else {
        item.style.display = 'none';
      }
    });
  }

  filterPosts();
  document.addEventListener('astro:page-load', () => {
    filterPosts();
  });
</script>

<style>
@keyframes fadeSlideIn {
  0% {
    opacity: 0;
    transform: translate3d(0, 0.5rem, 0);
    filter: blur(0.125rem);
  }
  100% {
    opacity: 1;
    transform: translate3d(0, 0, 0);
    filter: blur(0);
  }
}
.post-item {
  animation: fadeSlideIn 0.5s ease-out;
  animation-fill-mode: both;
  animation-delay: calc(var(--sibling-index) * 0.05s + 632ms);
}

</style>
