---
import '@/styles/post.css';
import { t } from 'astro-i18n';

import TableOfContents from '@/ui/components/Post/TableOfContents/TableOfContents.astro';
import Layout from '@/ui/layouts/Layout.astro';

import type { Post } from '@/types/Post';

interface Props {
  post: Post;
}

const { post } = Astro.props;

const ogImage = `${Astro.url.origin}/posts/${post.slug.replaceAll(
  '/',
  '__',
)}/og.png`;
---

<Layout title={post.data.title}>
  <Fragment slot='head'>
    <meta property='og:title' content={post.data.title} />
    <meta property='og:description' content={post.data.description} />
    <meta property='og:url' content={Astro.url.href} />
    <meta property='og:image' content={ogImage} />
    <meta property='og:locale' content={post.data.locale} />
    <meta property='og:type' content='article' />
    <meta
      property='article:published_time'
      content={post.data.date.toLocaleDateString()}
    />
    <meta
      property='article:author'
      content={`${Astro.url.origin}/${post.data.locale}/about`}
    />
    <meta
      property='article:tag'
      content={post.data.tags.map((tag) => tag).join(',')}
    />
    <meta name='twitter:card' content='summary_large_image' />
    <meta name='twitter:title' content={post.data.title} />
    <meta property='twitter:description' content={post.data.description} />
    <meta name='twitter:image' content={ogImage} />
  </Fragment>
  <div class:list={'mt-28 relative w-full flex flex-col container gap-6 '}>
    <div class='overflow-hidden'>
      <h1
        class='text-balance text-[min(6vw,7em)] font-extrabold leading-[1.25] duration-1000 animate-in fade-in slide-in-from-bottom fill-mode-both'
      >
        {post.data.title}
      </h1>
    </div>
    <div class='flex flex-col gap-4 lg:flex-row'>
      <div class='flex w-full gap-4 lg:w-[min(25vw,25%)]'>
        <table>
          <tbody>
            <tr class='align-top'>
              <td class='whitespace-nowrap pb-3 pr-4 opacity-50'>
                {t('post.writtenBy')}
              </td>
              <td>
                {t('fullName')}
              </td>
            </tr>
          </tbody>
        </table>
      </div>

      <table class='w-full max-w-[712px] lg:mx-auto'>
        <tbody>
          <tr class='align-top'>
            <td class='whitespace-nowrap pb-3 opacity-50'>
              {t('post.description')}
            </td>
            <td>
              {post.data.description}
            </td>
          </tr>
          <tr class='align-top'>
            <td class='whitespace-nowrap pb-3 opacity-50'>
              {t('post.publishedAt')}
            </td>
            <td>
              {
                Intl.DateTimeFormat(post.data.locale, {
                  year: 'numeric',
                  month: 'long',
                  day: 'numeric',
                }).format(post.data.date)
              }
            </td>
          </tr>
          <tr class='align-top'>
            <td class='whitespace-nowrap pb-3 opacity-50'>
              {t('post.tags')}
            </td>
            <td>
              <div class='flex flex-wrap gap-1'>
                {post.data.tags.map((tag) => <span>#{tag}</span>)}
              </div>
            </td>
          </tr>
        </tbody>
      </table>
    </div>
  </div>

  <div class='mb-12 mt-8 h-[1px] w-full bg-foreground'></div>
  <div class='container flex gap-4'>
    <TableOfContents post={post.body} />
    <div id='post-content' class='prose w-full dark:prose-invert lg:mx-auto'>
      <slot />
    </div>
  </div>
</Layout>

<script is:inline>
  document.addEventListener('astro:page-load', () => {
    document
      .getElementById('post-content')
      ?.childNodes.forEach((node, index) => {
        if (!(node instanceof HTMLElement)) {
          return;
        }
        node.classList.add(
          'duration-300',
          'animate-in',
          'fade-in',
          'slide-in-from-bottom-[3rem]',
          'fill-mode-both',
        );

        node.style.animationDelay = `${1 + (index + 1) * 0.02}s`;
      });
  });
</script>
